plugins {
    id 'java'
    id 'war'
    id "org.flywaydb.flyway" version "7.10.0"
    id 'jacoco'
}

group 'com.epam.esm'
version '1.0-SNAPSHOT'

def springVersion = '5.3.8'

def props = new Properties()
file("./src/main/resources/application.properties").withInputStream { props.load(it) }

if (props.getProperty("spring.profiles.active") == "dev") {
    file("./src/main/resources/application-dev.properties").withInputStream { props.load(it) }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.springframework:spring-core:${springVersion}"
    implementation "org.springframework:spring-context:${springVersion}"
    implementation "org.springframework:spring-web:${springVersion}"
    implementation "org.springframework:spring-webmvc:${springVersion}"
    implementation "org.springframework:spring-jdbc:${springVersion}"
    implementation 'javax.servlet:javax.servlet-api:4.0.1'
    implementation 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.12.3'
    implementation 'com.fasterxml.jackson.module:jackson-module-parameter-names:2.12.3'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.12.3'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.9.3'
    implementation 'org.postgresql:postgresql:42.2.22'
    implementation 'org.apache.logging.log4j:log4j-api:2.14.1'
    implementation 'org.apache.logging.log4j:log4j-core:2.14.1'

    testImplementation "org.flywaydb:flyway-core:7.10.0"
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
    testImplementation 'org.mockito:mockito-core:3.11.1'
    testImplementation 'org.flywaydb.flyway-test-extensions:flyway-test:7.0.0'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('reports/tests/coverage/')
    }
    classDirectories.setFrom(
            fileTree(dir: "build/classes/java/main/com/epam/esm")
                    .filter({ file -> !file.path.contains('/config') })
                    .filter({ file -> !file.path.contains('/api') })
    )
}

war {
    archiveName 'rest-api-basics.war'
}

flyway {
    driver = props.getProperty("datasource.driver")
    url = props.getProperty("datasource.url-flyway")
    user = props.getProperty("datasource.username")
    password = props.getProperty("datasource.password")

    schemas = ['gifts']
    locations = ['classpath:db/migrations']
}